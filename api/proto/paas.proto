syntax = "proto3";

package paas.v1;

option go_package = "github.com/paas-provider/api/proto/paas/v1;paasv1";

// Template represents a configuration template
message Template {
  string id = 1;
  string name = 2;
  enum Type {
    TYPE_UNSPECIFIED = 0;
    TYPE_VM = 1;
    TYPE_KUBERNETES = 2;
  }
  Type type = 3;
  string raw_template = 4; // Go template
}

// VirtualMachine represents a VM configuration
message VirtualMachine {
  string id = 1;
  string name = 2;
  int32 cpu = 3;
  int32 memory = 4; // in MB
  string os = 5;
  string template_id = 6;
  string rendered_template = 7;
}

// KubernetesCluster represents a Kubernetes cluster configuration
message KubernetesCluster {
  string id = 1;
  string name = 2;
  string region = 3;
  int32 node_count = 4;
  string version = 5;
  string template_id = 6;
  string rendered_template = 7;
}

// Request and response messages for Template service
message CreateTemplateRequest {
  Template template = 1;
}

message CreateTemplateResponse {
  Template template = 1;
}

message GetTemplateRequest {
  string id = 1;
}

message GetTemplateResponse {
  Template template = 1;
}

message ListTemplatesRequest {
  // Filter by template type
  Template.Type type = 1;
}

message ListTemplatesResponse {
  repeated Template templates = 1;
}

message UpdateTemplateRequest {
  Template template = 1;
}

message UpdateTemplateResponse {
  Template template = 1;
}

message DeleteTemplateRequest {
  string id = 1;
}

message DeleteTemplateResponse {
  bool success = 1;
}

// Request and response messages for VirtualMachine service
message CreateVirtualMachineRequest {
  VirtualMachine virtual_machine = 1;
}

message CreateVirtualMachineResponse {
  VirtualMachine virtual_machine = 1;
}

message GetVirtualMachineRequest {
  string id = 1;
}

message GetVirtualMachineResponse {
  VirtualMachine virtual_machine = 1;
}

message ListVirtualMachinesRequest {}

message ListVirtualMachinesResponse {
  repeated VirtualMachine virtual_machines = 1;
}

message UpdateVirtualMachineRequest {
  VirtualMachine virtual_machine = 1;
}

message UpdateVirtualMachineResponse {
  VirtualMachine virtual_machine = 1;
}

message DeleteVirtualMachineRequest {
  string id = 1;
}

message DeleteVirtualMachineResponse {
  bool success = 1;
}

// Request and response messages for KubernetesCluster service
message CreateKubernetesClusterRequest {
  KubernetesCluster kubernetes_cluster = 1;
}

message CreateKubernetesClusterResponse {
  KubernetesCluster kubernetes_cluster = 1;
}

message GetKubernetesClusterRequest {
  string id = 1;
}

message GetKubernetesClusterResponse {
  KubernetesCluster kubernetes_cluster = 1;
}

message ListKubernetesClustersRequest {}

message ListKubernetesClustersResponse {
  repeated KubernetesCluster kubernetes_clusters = 1;
}

message UpdateKubernetesClusterRequest {
  KubernetesCluster kubernetes_cluster = 1;
}

message UpdateKubernetesClusterResponse {
  KubernetesCluster kubernetes_cluster = 1;
}

message DeleteKubernetesClusterRequest {
  string id = 1;
}

message DeleteKubernetesClusterResponse {
  bool success = 1;
}

// Services
service TemplateService {
  rpc CreateTemplate(CreateTemplateRequest) returns (CreateTemplateResponse);
  rpc GetTemplate(GetTemplateRequest) returns (GetTemplateResponse);
  rpc ListTemplates(ListTemplatesRequest) returns (ListTemplatesResponse);
  rpc UpdateTemplate(UpdateTemplateRequest) returns (UpdateTemplateResponse);
  rpc DeleteTemplate(DeleteTemplateRequest) returns (DeleteTemplateResponse);
}

service VirtualMachineService {
  rpc CreateVirtualMachine(CreateVirtualMachineRequest) returns (CreateVirtualMachineResponse);
  rpc GetVirtualMachine(GetVirtualMachineRequest) returns (GetVirtualMachineResponse);
  rpc ListVirtualMachines(ListVirtualMachinesRequest) returns (ListVirtualMachinesResponse);
  rpc UpdateVirtualMachine(UpdateVirtualMachineRequest) returns (UpdateVirtualMachineResponse);
  rpc DeleteVirtualMachine(DeleteVirtualMachineRequest) returns (DeleteVirtualMachineResponse);
}

service KubernetesClusterService {
  rpc CreateKubernetesCluster(CreateKubernetesClusterRequest) returns (CreateKubernetesClusterResponse);
  rpc GetKubernetesCluster(GetKubernetesClusterRequest) returns (GetKubernetesClusterResponse);
  rpc ListKubernetesClusters(ListKubernetesClustersRequest) returns (ListKubernetesClustersResponse);
  rpc UpdateKubernetesCluster(UpdateKubernetesClusterRequest) returns (UpdateKubernetesClusterResponse);
  rpc DeleteKubernetesCluster(DeleteKubernetesClusterRequest) returns (DeleteKubernetesClusterResponse);
}