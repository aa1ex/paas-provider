syntax = "proto3";

package virtual_machine.v1;

option go_package = "virtualmachinev1";

service VirtualMachineService {
  rpc CreateVirtualMachine(CreateVirtualMachineRequest) returns (CreateVirtualMachineResponse);
  rpc GetVirtualMachine(GetVirtualMachineRequest) returns (GetVirtualMachineResponse);
  rpc ListVirtualMachines(ListVirtualMachinesRequest) returns (ListVirtualMachinesResponse);
  rpc UpdateVirtualMachine(UpdateVirtualMachineRequest) returns (UpdateVirtualMachineResponse);
  rpc DeleteVirtualMachine(DeleteVirtualMachineRequest) returns (DeleteVirtualMachineResponse);
}

// VirtualMachine represents a VM configuration
message VirtualMachine {
  string id = 1;
  string name = 2;
  int32 cpu = 3;
  int32 memory = 4; // in MB
  string os = 5;
  string template_id = 6;
  string rendered_template = 7;
}

// Request and response messages for VirtualMachine service
message CreateVirtualMachineRequest {
  VirtualMachine virtual_machine = 1;
}

message CreateVirtualMachineResponse {
  VirtualMachine virtual_machine = 1;
}

message GetVirtualMachineRequest {
  string id = 1;
}

message GetVirtualMachineResponse {
  VirtualMachine virtual_machine = 1;
}

message ListVirtualMachinesRequest {}

message ListVirtualMachinesResponse {
  repeated VirtualMachine virtual_machines = 1;
}

message UpdateVirtualMachineRequest {
  VirtualMachine virtual_machine = 1;
}

message UpdateVirtualMachineResponse {
  VirtualMachine virtual_machine = 1;
}

message DeleteVirtualMachineRequest {
  string id = 1;
}

message DeleteVirtualMachineResponse {
  bool success = 1;
}
