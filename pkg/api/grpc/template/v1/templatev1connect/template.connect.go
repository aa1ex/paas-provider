// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: template/v1/template.proto

package templatev1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/aa1ex/paas-provider/pkg/api/grpc/template/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// TemplateServiceName is the fully-qualified name of the TemplateService service.
	TemplateServiceName = "template.v1.TemplateService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// TemplateServiceCreateTemplateProcedure is the fully-qualified name of the TemplateService's
	// CreateTemplate RPC.
	TemplateServiceCreateTemplateProcedure = "/template.v1.TemplateService/CreateTemplate"
	// TemplateServiceGetTemplateProcedure is the fully-qualified name of the TemplateService's
	// GetTemplate RPC.
	TemplateServiceGetTemplateProcedure = "/template.v1.TemplateService/GetTemplate"
	// TemplateServiceListTemplatesProcedure is the fully-qualified name of the TemplateService's
	// ListTemplates RPC.
	TemplateServiceListTemplatesProcedure = "/template.v1.TemplateService/ListTemplates"
	// TemplateServiceUpdateTemplateProcedure is the fully-qualified name of the TemplateService's
	// UpdateTemplate RPC.
	TemplateServiceUpdateTemplateProcedure = "/template.v1.TemplateService/UpdateTemplate"
	// TemplateServiceDeleteTemplateProcedure is the fully-qualified name of the TemplateService's
	// DeleteTemplate RPC.
	TemplateServiceDeleteTemplateProcedure = "/template.v1.TemplateService/DeleteTemplate"
)

// TemplateServiceClient is a client for the template.v1.TemplateService service.
type TemplateServiceClient interface {
	CreateTemplate(context.Context, *connect.Request[v1.CreateTemplateRequest]) (*connect.Response[v1.CreateTemplateResponse], error)
	GetTemplate(context.Context, *connect.Request[v1.GetTemplateRequest]) (*connect.Response[v1.GetTemplateResponse], error)
	ListTemplates(context.Context, *connect.Request[v1.ListTemplatesRequest]) (*connect.Response[v1.ListTemplatesResponse], error)
	UpdateTemplate(context.Context, *connect.Request[v1.UpdateTemplateRequest]) (*connect.Response[v1.UpdateTemplateResponse], error)
	DeleteTemplate(context.Context, *connect.Request[v1.DeleteTemplateRequest]) (*connect.Response[v1.DeleteTemplateResponse], error)
}

// NewTemplateServiceClient constructs a client for the template.v1.TemplateService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewTemplateServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) TemplateServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	templateServiceMethods := v1.File_template_v1_template_proto.Services().ByName("TemplateService").Methods()
	return &templateServiceClient{
		createTemplate: connect.NewClient[v1.CreateTemplateRequest, v1.CreateTemplateResponse](
			httpClient,
			baseURL+TemplateServiceCreateTemplateProcedure,
			connect.WithSchema(templateServiceMethods.ByName("CreateTemplate")),
			connect.WithClientOptions(opts...),
		),
		getTemplate: connect.NewClient[v1.GetTemplateRequest, v1.GetTemplateResponse](
			httpClient,
			baseURL+TemplateServiceGetTemplateProcedure,
			connect.WithSchema(templateServiceMethods.ByName("GetTemplate")),
			connect.WithClientOptions(opts...),
		),
		listTemplates: connect.NewClient[v1.ListTemplatesRequest, v1.ListTemplatesResponse](
			httpClient,
			baseURL+TemplateServiceListTemplatesProcedure,
			connect.WithSchema(templateServiceMethods.ByName("ListTemplates")),
			connect.WithClientOptions(opts...),
		),
		updateTemplate: connect.NewClient[v1.UpdateTemplateRequest, v1.UpdateTemplateResponse](
			httpClient,
			baseURL+TemplateServiceUpdateTemplateProcedure,
			connect.WithSchema(templateServiceMethods.ByName("UpdateTemplate")),
			connect.WithClientOptions(opts...),
		),
		deleteTemplate: connect.NewClient[v1.DeleteTemplateRequest, v1.DeleteTemplateResponse](
			httpClient,
			baseURL+TemplateServiceDeleteTemplateProcedure,
			connect.WithSchema(templateServiceMethods.ByName("DeleteTemplate")),
			connect.WithClientOptions(opts...),
		),
	}
}

// templateServiceClient implements TemplateServiceClient.
type templateServiceClient struct {
	createTemplate *connect.Client[v1.CreateTemplateRequest, v1.CreateTemplateResponse]
	getTemplate    *connect.Client[v1.GetTemplateRequest, v1.GetTemplateResponse]
	listTemplates  *connect.Client[v1.ListTemplatesRequest, v1.ListTemplatesResponse]
	updateTemplate *connect.Client[v1.UpdateTemplateRequest, v1.UpdateTemplateResponse]
	deleteTemplate *connect.Client[v1.DeleteTemplateRequest, v1.DeleteTemplateResponse]
}

// CreateTemplate calls template.v1.TemplateService.CreateTemplate.
func (c *templateServiceClient) CreateTemplate(ctx context.Context, req *connect.Request[v1.CreateTemplateRequest]) (*connect.Response[v1.CreateTemplateResponse], error) {
	return c.createTemplate.CallUnary(ctx, req)
}

// GetTemplate calls template.v1.TemplateService.GetTemplate.
func (c *templateServiceClient) GetTemplate(ctx context.Context, req *connect.Request[v1.GetTemplateRequest]) (*connect.Response[v1.GetTemplateResponse], error) {
	return c.getTemplate.CallUnary(ctx, req)
}

// ListTemplates calls template.v1.TemplateService.ListTemplates.
func (c *templateServiceClient) ListTemplates(ctx context.Context, req *connect.Request[v1.ListTemplatesRequest]) (*connect.Response[v1.ListTemplatesResponse], error) {
	return c.listTemplates.CallUnary(ctx, req)
}

// UpdateTemplate calls template.v1.TemplateService.UpdateTemplate.
func (c *templateServiceClient) UpdateTemplate(ctx context.Context, req *connect.Request[v1.UpdateTemplateRequest]) (*connect.Response[v1.UpdateTemplateResponse], error) {
	return c.updateTemplate.CallUnary(ctx, req)
}

// DeleteTemplate calls template.v1.TemplateService.DeleteTemplate.
func (c *templateServiceClient) DeleteTemplate(ctx context.Context, req *connect.Request[v1.DeleteTemplateRequest]) (*connect.Response[v1.DeleteTemplateResponse], error) {
	return c.deleteTemplate.CallUnary(ctx, req)
}

// TemplateServiceHandler is an implementation of the template.v1.TemplateService service.
type TemplateServiceHandler interface {
	CreateTemplate(context.Context, *connect.Request[v1.CreateTemplateRequest]) (*connect.Response[v1.CreateTemplateResponse], error)
	GetTemplate(context.Context, *connect.Request[v1.GetTemplateRequest]) (*connect.Response[v1.GetTemplateResponse], error)
	ListTemplates(context.Context, *connect.Request[v1.ListTemplatesRequest]) (*connect.Response[v1.ListTemplatesResponse], error)
	UpdateTemplate(context.Context, *connect.Request[v1.UpdateTemplateRequest]) (*connect.Response[v1.UpdateTemplateResponse], error)
	DeleteTemplate(context.Context, *connect.Request[v1.DeleteTemplateRequest]) (*connect.Response[v1.DeleteTemplateResponse], error)
}

// NewTemplateServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewTemplateServiceHandler(svc TemplateServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	templateServiceMethods := v1.File_template_v1_template_proto.Services().ByName("TemplateService").Methods()
	templateServiceCreateTemplateHandler := connect.NewUnaryHandler(
		TemplateServiceCreateTemplateProcedure,
		svc.CreateTemplate,
		connect.WithSchema(templateServiceMethods.ByName("CreateTemplate")),
		connect.WithHandlerOptions(opts...),
	)
	templateServiceGetTemplateHandler := connect.NewUnaryHandler(
		TemplateServiceGetTemplateProcedure,
		svc.GetTemplate,
		connect.WithSchema(templateServiceMethods.ByName("GetTemplate")),
		connect.WithHandlerOptions(opts...),
	)
	templateServiceListTemplatesHandler := connect.NewUnaryHandler(
		TemplateServiceListTemplatesProcedure,
		svc.ListTemplates,
		connect.WithSchema(templateServiceMethods.ByName("ListTemplates")),
		connect.WithHandlerOptions(opts...),
	)
	templateServiceUpdateTemplateHandler := connect.NewUnaryHandler(
		TemplateServiceUpdateTemplateProcedure,
		svc.UpdateTemplate,
		connect.WithSchema(templateServiceMethods.ByName("UpdateTemplate")),
		connect.WithHandlerOptions(opts...),
	)
	templateServiceDeleteTemplateHandler := connect.NewUnaryHandler(
		TemplateServiceDeleteTemplateProcedure,
		svc.DeleteTemplate,
		connect.WithSchema(templateServiceMethods.ByName("DeleteTemplate")),
		connect.WithHandlerOptions(opts...),
	)
	return "/template.v1.TemplateService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case TemplateServiceCreateTemplateProcedure:
			templateServiceCreateTemplateHandler.ServeHTTP(w, r)
		case TemplateServiceGetTemplateProcedure:
			templateServiceGetTemplateHandler.ServeHTTP(w, r)
		case TemplateServiceListTemplatesProcedure:
			templateServiceListTemplatesHandler.ServeHTTP(w, r)
		case TemplateServiceUpdateTemplateProcedure:
			templateServiceUpdateTemplateHandler.ServeHTTP(w, r)
		case TemplateServiceDeleteTemplateProcedure:
			templateServiceDeleteTemplateHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedTemplateServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedTemplateServiceHandler struct{}

func (UnimplementedTemplateServiceHandler) CreateTemplate(context.Context, *connect.Request[v1.CreateTemplateRequest]) (*connect.Response[v1.CreateTemplateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("template.v1.TemplateService.CreateTemplate is not implemented"))
}

func (UnimplementedTemplateServiceHandler) GetTemplate(context.Context, *connect.Request[v1.GetTemplateRequest]) (*connect.Response[v1.GetTemplateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("template.v1.TemplateService.GetTemplate is not implemented"))
}

func (UnimplementedTemplateServiceHandler) ListTemplates(context.Context, *connect.Request[v1.ListTemplatesRequest]) (*connect.Response[v1.ListTemplatesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("template.v1.TemplateService.ListTemplates is not implemented"))
}

func (UnimplementedTemplateServiceHandler) UpdateTemplate(context.Context, *connect.Request[v1.UpdateTemplateRequest]) (*connect.Response[v1.UpdateTemplateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("template.v1.TemplateService.UpdateTemplate is not implemented"))
}

func (UnimplementedTemplateServiceHandler) DeleteTemplate(context.Context, *connect.Request[v1.DeleteTemplateRequest]) (*connect.Response[v1.DeleteTemplateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("template.v1.TemplateService.DeleteTemplate is not implemented"))
}
