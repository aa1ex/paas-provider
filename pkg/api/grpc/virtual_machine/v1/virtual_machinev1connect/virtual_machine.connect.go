// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: virtual_machine/v1/virtual_machine.proto

package virtual_machinev1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/paas-provider/pkg/api/grpc/virtual_machine/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// VirtualMachineServiceName is the fully-qualified name of the VirtualMachineService service.
	VirtualMachineServiceName = "virtual_machine.v1.VirtualMachineService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// VirtualMachineServiceCreateVirtualMachineProcedure is the fully-qualified name of the
	// VirtualMachineService's CreateVirtualMachine RPC.
	VirtualMachineServiceCreateVirtualMachineProcedure = "/virtual_machine.v1.VirtualMachineService/CreateVirtualMachine"
	// VirtualMachineServiceGetVirtualMachineProcedure is the fully-qualified name of the
	// VirtualMachineService's GetVirtualMachine RPC.
	VirtualMachineServiceGetVirtualMachineProcedure = "/virtual_machine.v1.VirtualMachineService/GetVirtualMachine"
	// VirtualMachineServiceListVirtualMachinesProcedure is the fully-qualified name of the
	// VirtualMachineService's ListVirtualMachines RPC.
	VirtualMachineServiceListVirtualMachinesProcedure = "/virtual_machine.v1.VirtualMachineService/ListVirtualMachines"
	// VirtualMachineServiceUpdateVirtualMachineProcedure is the fully-qualified name of the
	// VirtualMachineService's UpdateVirtualMachine RPC.
	VirtualMachineServiceUpdateVirtualMachineProcedure = "/virtual_machine.v1.VirtualMachineService/UpdateVirtualMachine"
	// VirtualMachineServiceDeleteVirtualMachineProcedure is the fully-qualified name of the
	// VirtualMachineService's DeleteVirtualMachine RPC.
	VirtualMachineServiceDeleteVirtualMachineProcedure = "/virtual_machine.v1.VirtualMachineService/DeleteVirtualMachine"
)

// VirtualMachineServiceClient is a client for the virtual_machine.v1.VirtualMachineService service.
type VirtualMachineServiceClient interface {
	CreateVirtualMachine(context.Context, *connect.Request[v1.CreateVirtualMachineRequest]) (*connect.Response[v1.CreateVirtualMachineResponse], error)
	GetVirtualMachine(context.Context, *connect.Request[v1.GetVirtualMachineRequest]) (*connect.Response[v1.GetVirtualMachineResponse], error)
	ListVirtualMachines(context.Context, *connect.Request[v1.ListVirtualMachinesRequest]) (*connect.Response[v1.ListVirtualMachinesResponse], error)
	UpdateVirtualMachine(context.Context, *connect.Request[v1.UpdateVirtualMachineRequest]) (*connect.Response[v1.UpdateVirtualMachineResponse], error)
	DeleteVirtualMachine(context.Context, *connect.Request[v1.DeleteVirtualMachineRequest]) (*connect.Response[v1.DeleteVirtualMachineResponse], error)
}

// NewVirtualMachineServiceClient constructs a client for the
// virtual_machine.v1.VirtualMachineService service. By default, it uses the Connect protocol with
// the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed requests. To use
// the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewVirtualMachineServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) VirtualMachineServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	virtualMachineServiceMethods := v1.File_virtual_machine_v1_virtual_machine_proto.Services().ByName("VirtualMachineService").Methods()
	return &virtualMachineServiceClient{
		createVirtualMachine: connect.NewClient[v1.CreateVirtualMachineRequest, v1.CreateVirtualMachineResponse](
			httpClient,
			baseURL+VirtualMachineServiceCreateVirtualMachineProcedure,
			connect.WithSchema(virtualMachineServiceMethods.ByName("CreateVirtualMachine")),
			connect.WithClientOptions(opts...),
		),
		getVirtualMachine: connect.NewClient[v1.GetVirtualMachineRequest, v1.GetVirtualMachineResponse](
			httpClient,
			baseURL+VirtualMachineServiceGetVirtualMachineProcedure,
			connect.WithSchema(virtualMachineServiceMethods.ByName("GetVirtualMachine")),
			connect.WithClientOptions(opts...),
		),
		listVirtualMachines: connect.NewClient[v1.ListVirtualMachinesRequest, v1.ListVirtualMachinesResponse](
			httpClient,
			baseURL+VirtualMachineServiceListVirtualMachinesProcedure,
			connect.WithSchema(virtualMachineServiceMethods.ByName("ListVirtualMachines")),
			connect.WithClientOptions(opts...),
		),
		updateVirtualMachine: connect.NewClient[v1.UpdateVirtualMachineRequest, v1.UpdateVirtualMachineResponse](
			httpClient,
			baseURL+VirtualMachineServiceUpdateVirtualMachineProcedure,
			connect.WithSchema(virtualMachineServiceMethods.ByName("UpdateVirtualMachine")),
			connect.WithClientOptions(opts...),
		),
		deleteVirtualMachine: connect.NewClient[v1.DeleteVirtualMachineRequest, v1.DeleteVirtualMachineResponse](
			httpClient,
			baseURL+VirtualMachineServiceDeleteVirtualMachineProcedure,
			connect.WithSchema(virtualMachineServiceMethods.ByName("DeleteVirtualMachine")),
			connect.WithClientOptions(opts...),
		),
	}
}

// virtualMachineServiceClient implements VirtualMachineServiceClient.
type virtualMachineServiceClient struct {
	createVirtualMachine *connect.Client[v1.CreateVirtualMachineRequest, v1.CreateVirtualMachineResponse]
	getVirtualMachine    *connect.Client[v1.GetVirtualMachineRequest, v1.GetVirtualMachineResponse]
	listVirtualMachines  *connect.Client[v1.ListVirtualMachinesRequest, v1.ListVirtualMachinesResponse]
	updateVirtualMachine *connect.Client[v1.UpdateVirtualMachineRequest, v1.UpdateVirtualMachineResponse]
	deleteVirtualMachine *connect.Client[v1.DeleteVirtualMachineRequest, v1.DeleteVirtualMachineResponse]
}

// CreateVirtualMachine calls virtual_machine.v1.VirtualMachineService.CreateVirtualMachine.
func (c *virtualMachineServiceClient) CreateVirtualMachine(ctx context.Context, req *connect.Request[v1.CreateVirtualMachineRequest]) (*connect.Response[v1.CreateVirtualMachineResponse], error) {
	return c.createVirtualMachine.CallUnary(ctx, req)
}

// GetVirtualMachine calls virtual_machine.v1.VirtualMachineService.GetVirtualMachine.
func (c *virtualMachineServiceClient) GetVirtualMachine(ctx context.Context, req *connect.Request[v1.GetVirtualMachineRequest]) (*connect.Response[v1.GetVirtualMachineResponse], error) {
	return c.getVirtualMachine.CallUnary(ctx, req)
}

// ListVirtualMachines calls virtual_machine.v1.VirtualMachineService.ListVirtualMachines.
func (c *virtualMachineServiceClient) ListVirtualMachines(ctx context.Context, req *connect.Request[v1.ListVirtualMachinesRequest]) (*connect.Response[v1.ListVirtualMachinesResponse], error) {
	return c.listVirtualMachines.CallUnary(ctx, req)
}

// UpdateVirtualMachine calls virtual_machine.v1.VirtualMachineService.UpdateVirtualMachine.
func (c *virtualMachineServiceClient) UpdateVirtualMachine(ctx context.Context, req *connect.Request[v1.UpdateVirtualMachineRequest]) (*connect.Response[v1.UpdateVirtualMachineResponse], error) {
	return c.updateVirtualMachine.CallUnary(ctx, req)
}

// DeleteVirtualMachine calls virtual_machine.v1.VirtualMachineService.DeleteVirtualMachine.
func (c *virtualMachineServiceClient) DeleteVirtualMachine(ctx context.Context, req *connect.Request[v1.DeleteVirtualMachineRequest]) (*connect.Response[v1.DeleteVirtualMachineResponse], error) {
	return c.deleteVirtualMachine.CallUnary(ctx, req)
}

// VirtualMachineServiceHandler is an implementation of the virtual_machine.v1.VirtualMachineService
// service.
type VirtualMachineServiceHandler interface {
	CreateVirtualMachine(context.Context, *connect.Request[v1.CreateVirtualMachineRequest]) (*connect.Response[v1.CreateVirtualMachineResponse], error)
	GetVirtualMachine(context.Context, *connect.Request[v1.GetVirtualMachineRequest]) (*connect.Response[v1.GetVirtualMachineResponse], error)
	ListVirtualMachines(context.Context, *connect.Request[v1.ListVirtualMachinesRequest]) (*connect.Response[v1.ListVirtualMachinesResponse], error)
	UpdateVirtualMachine(context.Context, *connect.Request[v1.UpdateVirtualMachineRequest]) (*connect.Response[v1.UpdateVirtualMachineResponse], error)
	DeleteVirtualMachine(context.Context, *connect.Request[v1.DeleteVirtualMachineRequest]) (*connect.Response[v1.DeleteVirtualMachineResponse], error)
}

// NewVirtualMachineServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewVirtualMachineServiceHandler(svc VirtualMachineServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	virtualMachineServiceMethods := v1.File_virtual_machine_v1_virtual_machine_proto.Services().ByName("VirtualMachineService").Methods()
	virtualMachineServiceCreateVirtualMachineHandler := connect.NewUnaryHandler(
		VirtualMachineServiceCreateVirtualMachineProcedure,
		svc.CreateVirtualMachine,
		connect.WithSchema(virtualMachineServiceMethods.ByName("CreateVirtualMachine")),
		connect.WithHandlerOptions(opts...),
	)
	virtualMachineServiceGetVirtualMachineHandler := connect.NewUnaryHandler(
		VirtualMachineServiceGetVirtualMachineProcedure,
		svc.GetVirtualMachine,
		connect.WithSchema(virtualMachineServiceMethods.ByName("GetVirtualMachine")),
		connect.WithHandlerOptions(opts...),
	)
	virtualMachineServiceListVirtualMachinesHandler := connect.NewUnaryHandler(
		VirtualMachineServiceListVirtualMachinesProcedure,
		svc.ListVirtualMachines,
		connect.WithSchema(virtualMachineServiceMethods.ByName("ListVirtualMachines")),
		connect.WithHandlerOptions(opts...),
	)
	virtualMachineServiceUpdateVirtualMachineHandler := connect.NewUnaryHandler(
		VirtualMachineServiceUpdateVirtualMachineProcedure,
		svc.UpdateVirtualMachine,
		connect.WithSchema(virtualMachineServiceMethods.ByName("UpdateVirtualMachine")),
		connect.WithHandlerOptions(opts...),
	)
	virtualMachineServiceDeleteVirtualMachineHandler := connect.NewUnaryHandler(
		VirtualMachineServiceDeleteVirtualMachineProcedure,
		svc.DeleteVirtualMachine,
		connect.WithSchema(virtualMachineServiceMethods.ByName("DeleteVirtualMachine")),
		connect.WithHandlerOptions(opts...),
	)
	return "/virtual_machine.v1.VirtualMachineService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case VirtualMachineServiceCreateVirtualMachineProcedure:
			virtualMachineServiceCreateVirtualMachineHandler.ServeHTTP(w, r)
		case VirtualMachineServiceGetVirtualMachineProcedure:
			virtualMachineServiceGetVirtualMachineHandler.ServeHTTP(w, r)
		case VirtualMachineServiceListVirtualMachinesProcedure:
			virtualMachineServiceListVirtualMachinesHandler.ServeHTTP(w, r)
		case VirtualMachineServiceUpdateVirtualMachineProcedure:
			virtualMachineServiceUpdateVirtualMachineHandler.ServeHTTP(w, r)
		case VirtualMachineServiceDeleteVirtualMachineProcedure:
			virtualMachineServiceDeleteVirtualMachineHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedVirtualMachineServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedVirtualMachineServiceHandler struct{}

func (UnimplementedVirtualMachineServiceHandler) CreateVirtualMachine(context.Context, *connect.Request[v1.CreateVirtualMachineRequest]) (*connect.Response[v1.CreateVirtualMachineResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("virtual_machine.v1.VirtualMachineService.CreateVirtualMachine is not implemented"))
}

func (UnimplementedVirtualMachineServiceHandler) GetVirtualMachine(context.Context, *connect.Request[v1.GetVirtualMachineRequest]) (*connect.Response[v1.GetVirtualMachineResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("virtual_machine.v1.VirtualMachineService.GetVirtualMachine is not implemented"))
}

func (UnimplementedVirtualMachineServiceHandler) ListVirtualMachines(context.Context, *connect.Request[v1.ListVirtualMachinesRequest]) (*connect.Response[v1.ListVirtualMachinesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("virtual_machine.v1.VirtualMachineService.ListVirtualMachines is not implemented"))
}

func (UnimplementedVirtualMachineServiceHandler) UpdateVirtualMachine(context.Context, *connect.Request[v1.UpdateVirtualMachineRequest]) (*connect.Response[v1.UpdateVirtualMachineResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("virtual_machine.v1.VirtualMachineService.UpdateVirtualMachine is not implemented"))
}

func (UnimplementedVirtualMachineServiceHandler) DeleteVirtualMachine(context.Context, *connect.Request[v1.DeleteVirtualMachineRequest]) (*connect.Response[v1.DeleteVirtualMachineResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("virtual_machine.v1.VirtualMachineService.DeleteVirtualMachine is not implemented"))
}
