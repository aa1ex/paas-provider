// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        (unknown)
// source: kubernetes_cluster/v1/kubernetes_cluster.proto

package kubernetes_clusterv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// KubernetesCluster represents a Kubernetes cluster configuration
type KubernetesCluster struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Id               string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name             string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Region           string                 `protobuf:"bytes,3,opt,name=region,proto3" json:"region,omitempty"`
	NodeCount        int32                  `protobuf:"varint,4,opt,name=node_count,json=nodeCount,proto3" json:"node_count,omitempty"`
	Version          string                 `protobuf:"bytes,5,opt,name=version,proto3" json:"version,omitempty"`
	TemplateId       string                 `protobuf:"bytes,6,opt,name=template_id,json=templateId,proto3" json:"template_id,omitempty"`
	RenderedTemplate string                 `protobuf:"bytes,7,opt,name=rendered_template,json=renderedTemplate,proto3" json:"rendered_template,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *KubernetesCluster) Reset() {
	*x = KubernetesCluster{}
	mi := &file_kubernetes_cluster_v1_kubernetes_cluster_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KubernetesCluster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubernetesCluster) ProtoMessage() {}

func (x *KubernetesCluster) ProtoReflect() protoreflect.Message {
	mi := &file_kubernetes_cluster_v1_kubernetes_cluster_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubernetesCluster.ProtoReflect.Descriptor instead.
func (*KubernetesCluster) Descriptor() ([]byte, []int) {
	return file_kubernetes_cluster_v1_kubernetes_cluster_proto_rawDescGZIP(), []int{0}
}

func (x *KubernetesCluster) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *KubernetesCluster) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *KubernetesCluster) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *KubernetesCluster) GetNodeCount() int32 {
	if x != nil {
		return x.NodeCount
	}
	return 0
}

func (x *KubernetesCluster) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *KubernetesCluster) GetTemplateId() string {
	if x != nil {
		return x.TemplateId
	}
	return ""
}

func (x *KubernetesCluster) GetRenderedTemplate() string {
	if x != nil {
		return x.RenderedTemplate
	}
	return ""
}

// Request and response messages for KubernetesCluster service
type CreateKubernetesClusterRequest struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	KubernetesCluster *KubernetesCluster     `protobuf:"bytes,1,opt,name=kubernetes_cluster,json=kubernetesCluster,proto3" json:"kubernetes_cluster,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *CreateKubernetesClusterRequest) Reset() {
	*x = CreateKubernetesClusterRequest{}
	mi := &file_kubernetes_cluster_v1_kubernetes_cluster_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateKubernetesClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateKubernetesClusterRequest) ProtoMessage() {}

func (x *CreateKubernetesClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kubernetes_cluster_v1_kubernetes_cluster_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateKubernetesClusterRequest.ProtoReflect.Descriptor instead.
func (*CreateKubernetesClusterRequest) Descriptor() ([]byte, []int) {
	return file_kubernetes_cluster_v1_kubernetes_cluster_proto_rawDescGZIP(), []int{1}
}

func (x *CreateKubernetesClusterRequest) GetKubernetesCluster() *KubernetesCluster {
	if x != nil {
		return x.KubernetesCluster
	}
	return nil
}

type CreateKubernetesClusterResponse struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	KubernetesCluster *KubernetesCluster     `protobuf:"bytes,1,opt,name=kubernetes_cluster,json=kubernetesCluster,proto3" json:"kubernetes_cluster,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *CreateKubernetesClusterResponse) Reset() {
	*x = CreateKubernetesClusterResponse{}
	mi := &file_kubernetes_cluster_v1_kubernetes_cluster_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateKubernetesClusterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateKubernetesClusterResponse) ProtoMessage() {}

func (x *CreateKubernetesClusterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kubernetes_cluster_v1_kubernetes_cluster_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateKubernetesClusterResponse.ProtoReflect.Descriptor instead.
func (*CreateKubernetesClusterResponse) Descriptor() ([]byte, []int) {
	return file_kubernetes_cluster_v1_kubernetes_cluster_proto_rawDescGZIP(), []int{2}
}

func (x *CreateKubernetesClusterResponse) GetKubernetesCluster() *KubernetesCluster {
	if x != nil {
		return x.KubernetesCluster
	}
	return nil
}

type GetKubernetesClusterRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetKubernetesClusterRequest) Reset() {
	*x = GetKubernetesClusterRequest{}
	mi := &file_kubernetes_cluster_v1_kubernetes_cluster_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetKubernetesClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKubernetesClusterRequest) ProtoMessage() {}

func (x *GetKubernetesClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kubernetes_cluster_v1_kubernetes_cluster_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKubernetesClusterRequest.ProtoReflect.Descriptor instead.
func (*GetKubernetesClusterRequest) Descriptor() ([]byte, []int) {
	return file_kubernetes_cluster_v1_kubernetes_cluster_proto_rawDescGZIP(), []int{3}
}

func (x *GetKubernetesClusterRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetKubernetesClusterResponse struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	KubernetesCluster *KubernetesCluster     `protobuf:"bytes,1,opt,name=kubernetes_cluster,json=kubernetesCluster,proto3" json:"kubernetes_cluster,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *GetKubernetesClusterResponse) Reset() {
	*x = GetKubernetesClusterResponse{}
	mi := &file_kubernetes_cluster_v1_kubernetes_cluster_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetKubernetesClusterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKubernetesClusterResponse) ProtoMessage() {}

func (x *GetKubernetesClusterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kubernetes_cluster_v1_kubernetes_cluster_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKubernetesClusterResponse.ProtoReflect.Descriptor instead.
func (*GetKubernetesClusterResponse) Descriptor() ([]byte, []int) {
	return file_kubernetes_cluster_v1_kubernetes_cluster_proto_rawDescGZIP(), []int{4}
}

func (x *GetKubernetesClusterResponse) GetKubernetesCluster() *KubernetesCluster {
	if x != nil {
		return x.KubernetesCluster
	}
	return nil
}

type ListKubernetesClustersRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListKubernetesClustersRequest) Reset() {
	*x = ListKubernetesClustersRequest{}
	mi := &file_kubernetes_cluster_v1_kubernetes_cluster_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListKubernetesClustersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListKubernetesClustersRequest) ProtoMessage() {}

func (x *ListKubernetesClustersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kubernetes_cluster_v1_kubernetes_cluster_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListKubernetesClustersRequest.ProtoReflect.Descriptor instead.
func (*ListKubernetesClustersRequest) Descriptor() ([]byte, []int) {
	return file_kubernetes_cluster_v1_kubernetes_cluster_proto_rawDescGZIP(), []int{5}
}

type ListKubernetesClustersResponse struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	KubernetesClusters []*KubernetesCluster   `protobuf:"bytes,1,rep,name=kubernetes_clusters,json=kubernetesClusters,proto3" json:"kubernetes_clusters,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *ListKubernetesClustersResponse) Reset() {
	*x = ListKubernetesClustersResponse{}
	mi := &file_kubernetes_cluster_v1_kubernetes_cluster_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListKubernetesClustersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListKubernetesClustersResponse) ProtoMessage() {}

func (x *ListKubernetesClustersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kubernetes_cluster_v1_kubernetes_cluster_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListKubernetesClustersResponse.ProtoReflect.Descriptor instead.
func (*ListKubernetesClustersResponse) Descriptor() ([]byte, []int) {
	return file_kubernetes_cluster_v1_kubernetes_cluster_proto_rawDescGZIP(), []int{6}
}

func (x *ListKubernetesClustersResponse) GetKubernetesClusters() []*KubernetesCluster {
	if x != nil {
		return x.KubernetesClusters
	}
	return nil
}

type UpdateKubernetesClusterRequest struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	KubernetesCluster *KubernetesCluster     `protobuf:"bytes,1,opt,name=kubernetes_cluster,json=kubernetesCluster,proto3" json:"kubernetes_cluster,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *UpdateKubernetesClusterRequest) Reset() {
	*x = UpdateKubernetesClusterRequest{}
	mi := &file_kubernetes_cluster_v1_kubernetes_cluster_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateKubernetesClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateKubernetesClusterRequest) ProtoMessage() {}

func (x *UpdateKubernetesClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kubernetes_cluster_v1_kubernetes_cluster_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateKubernetesClusterRequest.ProtoReflect.Descriptor instead.
func (*UpdateKubernetesClusterRequest) Descriptor() ([]byte, []int) {
	return file_kubernetes_cluster_v1_kubernetes_cluster_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateKubernetesClusterRequest) GetKubernetesCluster() *KubernetesCluster {
	if x != nil {
		return x.KubernetesCluster
	}
	return nil
}

type UpdateKubernetesClusterResponse struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	KubernetesCluster *KubernetesCluster     `protobuf:"bytes,1,opt,name=kubernetes_cluster,json=kubernetesCluster,proto3" json:"kubernetes_cluster,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *UpdateKubernetesClusterResponse) Reset() {
	*x = UpdateKubernetesClusterResponse{}
	mi := &file_kubernetes_cluster_v1_kubernetes_cluster_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateKubernetesClusterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateKubernetesClusterResponse) ProtoMessage() {}

func (x *UpdateKubernetesClusterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kubernetes_cluster_v1_kubernetes_cluster_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateKubernetesClusterResponse.ProtoReflect.Descriptor instead.
func (*UpdateKubernetesClusterResponse) Descriptor() ([]byte, []int) {
	return file_kubernetes_cluster_v1_kubernetes_cluster_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateKubernetesClusterResponse) GetKubernetesCluster() *KubernetesCluster {
	if x != nil {
		return x.KubernetesCluster
	}
	return nil
}

type DeleteKubernetesClusterRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteKubernetesClusterRequest) Reset() {
	*x = DeleteKubernetesClusterRequest{}
	mi := &file_kubernetes_cluster_v1_kubernetes_cluster_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteKubernetesClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteKubernetesClusterRequest) ProtoMessage() {}

func (x *DeleteKubernetesClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kubernetes_cluster_v1_kubernetes_cluster_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteKubernetesClusterRequest.ProtoReflect.Descriptor instead.
func (*DeleteKubernetesClusterRequest) Descriptor() ([]byte, []int) {
	return file_kubernetes_cluster_v1_kubernetes_cluster_proto_rawDescGZIP(), []int{9}
}

func (x *DeleteKubernetesClusterRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeleteKubernetesClusterResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteKubernetesClusterResponse) Reset() {
	*x = DeleteKubernetesClusterResponse{}
	mi := &file_kubernetes_cluster_v1_kubernetes_cluster_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteKubernetesClusterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteKubernetesClusterResponse) ProtoMessage() {}

func (x *DeleteKubernetesClusterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kubernetes_cluster_v1_kubernetes_cluster_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteKubernetesClusterResponse.ProtoReflect.Descriptor instead.
func (*DeleteKubernetesClusterResponse) Descriptor() ([]byte, []int) {
	return file_kubernetes_cluster_v1_kubernetes_cluster_proto_rawDescGZIP(), []int{10}
}

func (x *DeleteKubernetesClusterResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

var File_kubernetes_cluster_v1_kubernetes_cluster_proto protoreflect.FileDescriptor

var file_kubernetes_cluster_v1_kubernetes_cluster_proto_rawDesc = string([]byte{
	0x0a, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x5f, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74,
	0x65, 0x73, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x15, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x5f, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x22, 0xd6, 0x01, 0x0a, 0x11, 0x4b, 0x75, 0x62, 0x65,
	0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x6f, 0x64,
	0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6e,
	0x6f, 0x64, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x65, 0x64, 0x5f,
	0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x65, 0x64, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x22, 0x79, 0x0a, 0x1e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e,
	0x65, 0x74, 0x65, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x57, 0x0a, 0x12, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73,
	0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x5f, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65,
	0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x11, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e,
	0x65, 0x74, 0x65, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x22, 0x7a, 0x0a, 0x1f, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x57,
	0x0a, 0x12, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x5f, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6b, 0x75, 0x62,
	0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x52, 0x11, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x22, 0x2d, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x4b, 0x75,
	0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x77, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x4b, 0x75, 0x62,
	0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x57, 0x0a, 0x12, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e,
	0x65, 0x74, 0x65, 0x73, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x5f,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x72,
	0x6e, 0x65, 0x74, 0x65, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x11, 0x6b, 0x75,
	0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x22,
	0x1f, 0x0a, 0x1d, 0x4c, 0x69, 0x73, 0x74, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65,
	0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x7b, 0x0a, 0x1e, 0x4c, 0x69, 0x73, 0x74, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74,
	0x65, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x59, 0x0a, 0x13, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73,
	0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x5f, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74,
	0x65, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x12, 0x6b, 0x75, 0x62, 0x65, 0x72,
	0x6e, 0x65, 0x74, 0x65, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x22, 0x79, 0x0a,
	0x1e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65,
	0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x57, 0x0a, 0x12, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x5f, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6b, 0x75,
	0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x11, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65,
	0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x22, 0x7a, 0x0a, 0x1f, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x57, 0x0a, 0x12, 0x6b,
	0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e,
	0x65, 0x74, 0x65, 0x73, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x52, 0x11, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x22, 0x30, 0x0a, 0x1e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4b, 0x75,
	0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x3b, 0x0a, 0x1f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x32, 0xc4, 0x05, 0x0a, 0x18, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74,
	0x65, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x88, 0x01, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4b, 0x75, 0x62, 0x65, 0x72,
	0x6e, 0x65, 0x74, 0x65, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x35, 0x2e, 0x6b,
	0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4b, 0x75, 0x62, 0x65, 0x72,
	0x6e, 0x65, 0x74, 0x65, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73,
	0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7f, 0x0a, 0x14, 0x47,
	0x65, 0x74, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x12, 0x32, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73,
	0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4b,
	0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e,
	0x65, 0x74, 0x65, 0x73, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x85, 0x01, 0x0a,
	0x16, 0x4c, 0x69, 0x73, 0x74, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0x34, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e,
	0x65, 0x74, 0x65, 0x73, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e,
	0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e,
	0x65, 0x74, 0x65, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x88, 0x01, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4b,
	0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x12, 0x35, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x5f, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4b,
	0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e,
	0x65, 0x74, 0x65, 0x73, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x88, 0x01, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e,
	0x65, 0x74, 0x65, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x35, 0x2e, 0x6b, 0x75,
	0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e,
	0x65, 0x74, 0x65, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x36, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x5f,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0xf6, 0x01, 0x0a, 0x19, 0x63,
	0x6f, 0x6d, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x5f, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x42, 0x16, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e,
	0x65, 0x74, 0x65, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x50, 0x01, 0x5a, 0x50, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70,
	0x61, 0x61, 0x73, 0x2d, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2f, 0x70, 0x6b, 0x67,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e,
	0x65, 0x74, 0x65, 0x73, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x3b,
	0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x4b, 0x58, 0x58, 0xaa, 0x02, 0x14, 0x4b, 0x75, 0x62,
	0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x56,
	0x31, 0xca, 0x02, 0x14, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x20, 0x4b, 0x75, 0x62, 0x65, 0x72,
	0x6e, 0x65, 0x74, 0x65, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5c, 0x56, 0x31, 0x5c,
	0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x15, 0x4b, 0x75,
	0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x3a,
	0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_kubernetes_cluster_v1_kubernetes_cluster_proto_rawDescOnce sync.Once
	file_kubernetes_cluster_v1_kubernetes_cluster_proto_rawDescData []byte
)

func file_kubernetes_cluster_v1_kubernetes_cluster_proto_rawDescGZIP() []byte {
	file_kubernetes_cluster_v1_kubernetes_cluster_proto_rawDescOnce.Do(func() {
		file_kubernetes_cluster_v1_kubernetes_cluster_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_kubernetes_cluster_v1_kubernetes_cluster_proto_rawDesc), len(file_kubernetes_cluster_v1_kubernetes_cluster_proto_rawDesc)))
	})
	return file_kubernetes_cluster_v1_kubernetes_cluster_proto_rawDescData
}

var file_kubernetes_cluster_v1_kubernetes_cluster_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_kubernetes_cluster_v1_kubernetes_cluster_proto_goTypes = []any{
	(*KubernetesCluster)(nil),               // 0: kubernetes_cluster.v1.KubernetesCluster
	(*CreateKubernetesClusterRequest)(nil),  // 1: kubernetes_cluster.v1.CreateKubernetesClusterRequest
	(*CreateKubernetesClusterResponse)(nil), // 2: kubernetes_cluster.v1.CreateKubernetesClusterResponse
	(*GetKubernetesClusterRequest)(nil),     // 3: kubernetes_cluster.v1.GetKubernetesClusterRequest
	(*GetKubernetesClusterResponse)(nil),    // 4: kubernetes_cluster.v1.GetKubernetesClusterResponse
	(*ListKubernetesClustersRequest)(nil),   // 5: kubernetes_cluster.v1.ListKubernetesClustersRequest
	(*ListKubernetesClustersResponse)(nil),  // 6: kubernetes_cluster.v1.ListKubernetesClustersResponse
	(*UpdateKubernetesClusterRequest)(nil),  // 7: kubernetes_cluster.v1.UpdateKubernetesClusterRequest
	(*UpdateKubernetesClusterResponse)(nil), // 8: kubernetes_cluster.v1.UpdateKubernetesClusterResponse
	(*DeleteKubernetesClusterRequest)(nil),  // 9: kubernetes_cluster.v1.DeleteKubernetesClusterRequest
	(*DeleteKubernetesClusterResponse)(nil), // 10: kubernetes_cluster.v1.DeleteKubernetesClusterResponse
}
var file_kubernetes_cluster_v1_kubernetes_cluster_proto_depIdxs = []int32{
	0,  // 0: kubernetes_cluster.v1.CreateKubernetesClusterRequest.kubernetes_cluster:type_name -> kubernetes_cluster.v1.KubernetesCluster
	0,  // 1: kubernetes_cluster.v1.CreateKubernetesClusterResponse.kubernetes_cluster:type_name -> kubernetes_cluster.v1.KubernetesCluster
	0,  // 2: kubernetes_cluster.v1.GetKubernetesClusterResponse.kubernetes_cluster:type_name -> kubernetes_cluster.v1.KubernetesCluster
	0,  // 3: kubernetes_cluster.v1.ListKubernetesClustersResponse.kubernetes_clusters:type_name -> kubernetes_cluster.v1.KubernetesCluster
	0,  // 4: kubernetes_cluster.v1.UpdateKubernetesClusterRequest.kubernetes_cluster:type_name -> kubernetes_cluster.v1.KubernetesCluster
	0,  // 5: kubernetes_cluster.v1.UpdateKubernetesClusterResponse.kubernetes_cluster:type_name -> kubernetes_cluster.v1.KubernetesCluster
	1,  // 6: kubernetes_cluster.v1.KubernetesClusterService.CreateKubernetesCluster:input_type -> kubernetes_cluster.v1.CreateKubernetesClusterRequest
	3,  // 7: kubernetes_cluster.v1.KubernetesClusterService.GetKubernetesCluster:input_type -> kubernetes_cluster.v1.GetKubernetesClusterRequest
	5,  // 8: kubernetes_cluster.v1.KubernetesClusterService.ListKubernetesClusters:input_type -> kubernetes_cluster.v1.ListKubernetesClustersRequest
	7,  // 9: kubernetes_cluster.v1.KubernetesClusterService.UpdateKubernetesCluster:input_type -> kubernetes_cluster.v1.UpdateKubernetesClusterRequest
	9,  // 10: kubernetes_cluster.v1.KubernetesClusterService.DeleteKubernetesCluster:input_type -> kubernetes_cluster.v1.DeleteKubernetesClusterRequest
	2,  // 11: kubernetes_cluster.v1.KubernetesClusterService.CreateKubernetesCluster:output_type -> kubernetes_cluster.v1.CreateKubernetesClusterResponse
	4,  // 12: kubernetes_cluster.v1.KubernetesClusterService.GetKubernetesCluster:output_type -> kubernetes_cluster.v1.GetKubernetesClusterResponse
	6,  // 13: kubernetes_cluster.v1.KubernetesClusterService.ListKubernetesClusters:output_type -> kubernetes_cluster.v1.ListKubernetesClustersResponse
	8,  // 14: kubernetes_cluster.v1.KubernetesClusterService.UpdateKubernetesCluster:output_type -> kubernetes_cluster.v1.UpdateKubernetesClusterResponse
	10, // 15: kubernetes_cluster.v1.KubernetesClusterService.DeleteKubernetesCluster:output_type -> kubernetes_cluster.v1.DeleteKubernetesClusterResponse
	11, // [11:16] is the sub-list for method output_type
	6,  // [6:11] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_kubernetes_cluster_v1_kubernetes_cluster_proto_init() }
func file_kubernetes_cluster_v1_kubernetes_cluster_proto_init() {
	if File_kubernetes_cluster_v1_kubernetes_cluster_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_kubernetes_cluster_v1_kubernetes_cluster_proto_rawDesc), len(file_kubernetes_cluster_v1_kubernetes_cluster_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_kubernetes_cluster_v1_kubernetes_cluster_proto_goTypes,
		DependencyIndexes: file_kubernetes_cluster_v1_kubernetes_cluster_proto_depIdxs,
		MessageInfos:      file_kubernetes_cluster_v1_kubernetes_cluster_proto_msgTypes,
	}.Build()
	File_kubernetes_cluster_v1_kubernetes_cluster_proto = out.File
	file_kubernetes_cluster_v1_kubernetes_cluster_proto_goTypes = nil
	file_kubernetes_cluster_v1_kubernetes_cluster_proto_depIdxs = nil
}
