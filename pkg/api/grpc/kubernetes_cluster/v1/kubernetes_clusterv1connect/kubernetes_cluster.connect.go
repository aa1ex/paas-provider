// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: kubernetes_cluster/v1/kubernetes_cluster.proto

package kubernetes_clusterv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/paas-provider/pkg/api/grpc/kubernetes_cluster/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// KubernetesClusterServiceName is the fully-qualified name of the KubernetesClusterService service.
	KubernetesClusterServiceName = "kubernetes_cluster.v1.KubernetesClusterService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// KubernetesClusterServiceCreateKubernetesClusterProcedure is the fully-qualified name of the
	// KubernetesClusterService's CreateKubernetesCluster RPC.
	KubernetesClusterServiceCreateKubernetesClusterProcedure = "/kubernetes_cluster.v1.KubernetesClusterService/CreateKubernetesCluster"
	// KubernetesClusterServiceGetKubernetesClusterProcedure is the fully-qualified name of the
	// KubernetesClusterService's GetKubernetesCluster RPC.
	KubernetesClusterServiceGetKubernetesClusterProcedure = "/kubernetes_cluster.v1.KubernetesClusterService/GetKubernetesCluster"
	// KubernetesClusterServiceListKubernetesClustersProcedure is the fully-qualified name of the
	// KubernetesClusterService's ListKubernetesClusters RPC.
	KubernetesClusterServiceListKubernetesClustersProcedure = "/kubernetes_cluster.v1.KubernetesClusterService/ListKubernetesClusters"
	// KubernetesClusterServiceUpdateKubernetesClusterProcedure is the fully-qualified name of the
	// KubernetesClusterService's UpdateKubernetesCluster RPC.
	KubernetesClusterServiceUpdateKubernetesClusterProcedure = "/kubernetes_cluster.v1.KubernetesClusterService/UpdateKubernetesCluster"
	// KubernetesClusterServiceDeleteKubernetesClusterProcedure is the fully-qualified name of the
	// KubernetesClusterService's DeleteKubernetesCluster RPC.
	KubernetesClusterServiceDeleteKubernetesClusterProcedure = "/kubernetes_cluster.v1.KubernetesClusterService/DeleteKubernetesCluster"
)

// KubernetesClusterServiceClient is a client for the kubernetes_cluster.v1.KubernetesClusterService
// service.
type KubernetesClusterServiceClient interface {
	CreateKubernetesCluster(context.Context, *connect.Request[v1.CreateKubernetesClusterRequest]) (*connect.Response[v1.CreateKubernetesClusterResponse], error)
	GetKubernetesCluster(context.Context, *connect.Request[v1.GetKubernetesClusterRequest]) (*connect.Response[v1.GetKubernetesClusterResponse], error)
	ListKubernetesClusters(context.Context, *connect.Request[v1.ListKubernetesClustersRequest]) (*connect.Response[v1.ListKubernetesClustersResponse], error)
	UpdateKubernetesCluster(context.Context, *connect.Request[v1.UpdateKubernetesClusterRequest]) (*connect.Response[v1.UpdateKubernetesClusterResponse], error)
	DeleteKubernetesCluster(context.Context, *connect.Request[v1.DeleteKubernetesClusterRequest]) (*connect.Response[v1.DeleteKubernetesClusterResponse], error)
}

// NewKubernetesClusterServiceClient constructs a client for the
// kubernetes_cluster.v1.KubernetesClusterService service. By default, it uses the Connect protocol
// with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed requests. To
// use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or connect.WithGRPCWeb()
// options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewKubernetesClusterServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) KubernetesClusterServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	kubernetesClusterServiceMethods := v1.File_kubernetes_cluster_v1_kubernetes_cluster_proto.Services().ByName("KubernetesClusterService").Methods()
	return &kubernetesClusterServiceClient{
		createKubernetesCluster: connect.NewClient[v1.CreateKubernetesClusterRequest, v1.CreateKubernetesClusterResponse](
			httpClient,
			baseURL+KubernetesClusterServiceCreateKubernetesClusterProcedure,
			connect.WithSchema(kubernetesClusterServiceMethods.ByName("CreateKubernetesCluster")),
			connect.WithClientOptions(opts...),
		),
		getKubernetesCluster: connect.NewClient[v1.GetKubernetesClusterRequest, v1.GetKubernetesClusterResponse](
			httpClient,
			baseURL+KubernetesClusterServiceGetKubernetesClusterProcedure,
			connect.WithSchema(kubernetesClusterServiceMethods.ByName("GetKubernetesCluster")),
			connect.WithClientOptions(opts...),
		),
		listKubernetesClusters: connect.NewClient[v1.ListKubernetesClustersRequest, v1.ListKubernetesClustersResponse](
			httpClient,
			baseURL+KubernetesClusterServiceListKubernetesClustersProcedure,
			connect.WithSchema(kubernetesClusterServiceMethods.ByName("ListKubernetesClusters")),
			connect.WithClientOptions(opts...),
		),
		updateKubernetesCluster: connect.NewClient[v1.UpdateKubernetesClusterRequest, v1.UpdateKubernetesClusterResponse](
			httpClient,
			baseURL+KubernetesClusterServiceUpdateKubernetesClusterProcedure,
			connect.WithSchema(kubernetesClusterServiceMethods.ByName("UpdateKubernetesCluster")),
			connect.WithClientOptions(opts...),
		),
		deleteKubernetesCluster: connect.NewClient[v1.DeleteKubernetesClusterRequest, v1.DeleteKubernetesClusterResponse](
			httpClient,
			baseURL+KubernetesClusterServiceDeleteKubernetesClusterProcedure,
			connect.WithSchema(kubernetesClusterServiceMethods.ByName("DeleteKubernetesCluster")),
			connect.WithClientOptions(opts...),
		),
	}
}

// kubernetesClusterServiceClient implements KubernetesClusterServiceClient.
type kubernetesClusterServiceClient struct {
	createKubernetesCluster *connect.Client[v1.CreateKubernetesClusterRequest, v1.CreateKubernetesClusterResponse]
	getKubernetesCluster    *connect.Client[v1.GetKubernetesClusterRequest, v1.GetKubernetesClusterResponse]
	listKubernetesClusters  *connect.Client[v1.ListKubernetesClustersRequest, v1.ListKubernetesClustersResponse]
	updateKubernetesCluster *connect.Client[v1.UpdateKubernetesClusterRequest, v1.UpdateKubernetesClusterResponse]
	deleteKubernetesCluster *connect.Client[v1.DeleteKubernetesClusterRequest, v1.DeleteKubernetesClusterResponse]
}

// CreateKubernetesCluster calls
// kubernetes_cluster.v1.KubernetesClusterService.CreateKubernetesCluster.
func (c *kubernetesClusterServiceClient) CreateKubernetesCluster(ctx context.Context, req *connect.Request[v1.CreateKubernetesClusterRequest]) (*connect.Response[v1.CreateKubernetesClusterResponse], error) {
	return c.createKubernetesCluster.CallUnary(ctx, req)
}

// GetKubernetesCluster calls kubernetes_cluster.v1.KubernetesClusterService.GetKubernetesCluster.
func (c *kubernetesClusterServiceClient) GetKubernetesCluster(ctx context.Context, req *connect.Request[v1.GetKubernetesClusterRequest]) (*connect.Response[v1.GetKubernetesClusterResponse], error) {
	return c.getKubernetesCluster.CallUnary(ctx, req)
}

// ListKubernetesClusters calls
// kubernetes_cluster.v1.KubernetesClusterService.ListKubernetesClusters.
func (c *kubernetesClusterServiceClient) ListKubernetesClusters(ctx context.Context, req *connect.Request[v1.ListKubernetesClustersRequest]) (*connect.Response[v1.ListKubernetesClustersResponse], error) {
	return c.listKubernetesClusters.CallUnary(ctx, req)
}

// UpdateKubernetesCluster calls
// kubernetes_cluster.v1.KubernetesClusterService.UpdateKubernetesCluster.
func (c *kubernetesClusterServiceClient) UpdateKubernetesCluster(ctx context.Context, req *connect.Request[v1.UpdateKubernetesClusterRequest]) (*connect.Response[v1.UpdateKubernetesClusterResponse], error) {
	return c.updateKubernetesCluster.CallUnary(ctx, req)
}

// DeleteKubernetesCluster calls
// kubernetes_cluster.v1.KubernetesClusterService.DeleteKubernetesCluster.
func (c *kubernetesClusterServiceClient) DeleteKubernetesCluster(ctx context.Context, req *connect.Request[v1.DeleteKubernetesClusterRequest]) (*connect.Response[v1.DeleteKubernetesClusterResponse], error) {
	return c.deleteKubernetesCluster.CallUnary(ctx, req)
}

// KubernetesClusterServiceHandler is an implementation of the
// kubernetes_cluster.v1.KubernetesClusterService service.
type KubernetesClusterServiceHandler interface {
	CreateKubernetesCluster(context.Context, *connect.Request[v1.CreateKubernetesClusterRequest]) (*connect.Response[v1.CreateKubernetesClusterResponse], error)
	GetKubernetesCluster(context.Context, *connect.Request[v1.GetKubernetesClusterRequest]) (*connect.Response[v1.GetKubernetesClusterResponse], error)
	ListKubernetesClusters(context.Context, *connect.Request[v1.ListKubernetesClustersRequest]) (*connect.Response[v1.ListKubernetesClustersResponse], error)
	UpdateKubernetesCluster(context.Context, *connect.Request[v1.UpdateKubernetesClusterRequest]) (*connect.Response[v1.UpdateKubernetesClusterResponse], error)
	DeleteKubernetesCluster(context.Context, *connect.Request[v1.DeleteKubernetesClusterRequest]) (*connect.Response[v1.DeleteKubernetesClusterResponse], error)
}

// NewKubernetesClusterServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewKubernetesClusterServiceHandler(svc KubernetesClusterServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	kubernetesClusterServiceMethods := v1.File_kubernetes_cluster_v1_kubernetes_cluster_proto.Services().ByName("KubernetesClusterService").Methods()
	kubernetesClusterServiceCreateKubernetesClusterHandler := connect.NewUnaryHandler(
		KubernetesClusterServiceCreateKubernetesClusterProcedure,
		svc.CreateKubernetesCluster,
		connect.WithSchema(kubernetesClusterServiceMethods.ByName("CreateKubernetesCluster")),
		connect.WithHandlerOptions(opts...),
	)
	kubernetesClusterServiceGetKubernetesClusterHandler := connect.NewUnaryHandler(
		KubernetesClusterServiceGetKubernetesClusterProcedure,
		svc.GetKubernetesCluster,
		connect.WithSchema(kubernetesClusterServiceMethods.ByName("GetKubernetesCluster")),
		connect.WithHandlerOptions(opts...),
	)
	kubernetesClusterServiceListKubernetesClustersHandler := connect.NewUnaryHandler(
		KubernetesClusterServiceListKubernetesClustersProcedure,
		svc.ListKubernetesClusters,
		connect.WithSchema(kubernetesClusterServiceMethods.ByName("ListKubernetesClusters")),
		connect.WithHandlerOptions(opts...),
	)
	kubernetesClusterServiceUpdateKubernetesClusterHandler := connect.NewUnaryHandler(
		KubernetesClusterServiceUpdateKubernetesClusterProcedure,
		svc.UpdateKubernetesCluster,
		connect.WithSchema(kubernetesClusterServiceMethods.ByName("UpdateKubernetesCluster")),
		connect.WithHandlerOptions(opts...),
	)
	kubernetesClusterServiceDeleteKubernetesClusterHandler := connect.NewUnaryHandler(
		KubernetesClusterServiceDeleteKubernetesClusterProcedure,
		svc.DeleteKubernetesCluster,
		connect.WithSchema(kubernetesClusterServiceMethods.ByName("DeleteKubernetesCluster")),
		connect.WithHandlerOptions(opts...),
	)
	return "/kubernetes_cluster.v1.KubernetesClusterService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case KubernetesClusterServiceCreateKubernetesClusterProcedure:
			kubernetesClusterServiceCreateKubernetesClusterHandler.ServeHTTP(w, r)
		case KubernetesClusterServiceGetKubernetesClusterProcedure:
			kubernetesClusterServiceGetKubernetesClusterHandler.ServeHTTP(w, r)
		case KubernetesClusterServiceListKubernetesClustersProcedure:
			kubernetesClusterServiceListKubernetesClustersHandler.ServeHTTP(w, r)
		case KubernetesClusterServiceUpdateKubernetesClusterProcedure:
			kubernetesClusterServiceUpdateKubernetesClusterHandler.ServeHTTP(w, r)
		case KubernetesClusterServiceDeleteKubernetesClusterProcedure:
			kubernetesClusterServiceDeleteKubernetesClusterHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedKubernetesClusterServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedKubernetesClusterServiceHandler struct{}

func (UnimplementedKubernetesClusterServiceHandler) CreateKubernetesCluster(context.Context, *connect.Request[v1.CreateKubernetesClusterRequest]) (*connect.Response[v1.CreateKubernetesClusterResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("kubernetes_cluster.v1.KubernetesClusterService.CreateKubernetesCluster is not implemented"))
}

func (UnimplementedKubernetesClusterServiceHandler) GetKubernetesCluster(context.Context, *connect.Request[v1.GetKubernetesClusterRequest]) (*connect.Response[v1.GetKubernetesClusterResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("kubernetes_cluster.v1.KubernetesClusterService.GetKubernetesCluster is not implemented"))
}

func (UnimplementedKubernetesClusterServiceHandler) ListKubernetesClusters(context.Context, *connect.Request[v1.ListKubernetesClustersRequest]) (*connect.Response[v1.ListKubernetesClustersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("kubernetes_cluster.v1.KubernetesClusterService.ListKubernetesClusters is not implemented"))
}

func (UnimplementedKubernetesClusterServiceHandler) UpdateKubernetesCluster(context.Context, *connect.Request[v1.UpdateKubernetesClusterRequest]) (*connect.Response[v1.UpdateKubernetesClusterResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("kubernetes_cluster.v1.KubernetesClusterService.UpdateKubernetesCluster is not implemented"))
}

func (UnimplementedKubernetesClusterServiceHandler) DeleteKubernetesCluster(context.Context, *connect.Request[v1.DeleteKubernetesClusterRequest]) (*connect.Response[v1.DeleteKubernetesClusterResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("kubernetes_cluster.v1.KubernetesClusterService.DeleteKubernetesCluster is not implemented"))
}
